<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.plat.dao.ArticleMapper" >
  <resultMap id="BaseResultMap" type="com.plat.entity.Article" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="uid" property="uid" jdbcType="INTEGER" />
    <result column="title" property="title" jdbcType="VARCHAR" />
    <result column="tid" property="tid" jdbcType="INTEGER" />
    <result column="time" property="time" jdbcType="TIMESTAMP" />
    <result column="num" property="num" jdbcType="INTEGER" />
    <result column="flag" property="flag" jdbcType="INTEGER" />
    <result column="img" property="img" jdbcType="VARCHAR" />
    <result column="tname" property="tname" jdbcType="VARCHAR" />
    <result column="uname" property="uname" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.plat.entity.Article" extends="BaseResultMap" >
    <result column="content" property="content" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, uid, title, tid, time, num, flag, img
  </sql>
  <sql id="Blob_Column_List" >
    content
  </sql>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from article
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from article
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.plat.entity.Article" >
    insert into article (id, uid, title, 
      tid, time, num, flag, 
      img, content)
    values (#{id,jdbcType=INTEGER}, #{uid,jdbcType=INTEGER}, #{title,jdbcType=VARCHAR}, 
      #{tid,jdbcType=INTEGER}, #{time,jdbcType=TIMESTAMP}, #{num,jdbcType=INTEGER}, #{flag,jdbcType=INTEGER}, 
      #{img,jdbcType=VARCHAR}, #{content,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.plat.entity.Article" >
    insert into article
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="uid != null" >
        uid,
      </if>
      <if test="title != null" >
        title,
      </if>
      <if test="tid != null" >
        tid,
      </if>
      <if test="time != null" >
        time,
      </if>
      <if test="num != null" >
        num,
      </if>
      <if test="flag != null" >
        flag,
      </if>
      <if test="img != null" >
        img,
      </if>
      <if test="content != null" >
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="uid != null" >
        #{uid,jdbcType=INTEGER},
      </if>
      <if test="title != null" >
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="tid != null" >
        #{tid,jdbcType=INTEGER},
      </if>
      <if test="time != null" >
        #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="num != null" >
        #{num,jdbcType=INTEGER},
      </if>
      <if test="flag != null" >
        #{flag,jdbcType=INTEGER},
      </if>
      <if test="img != null" >
        #{img,jdbcType=VARCHAR},
      </if>
      <if test="content != null" >
        #{content,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.plat.entity.Article" >
    update article
    <set >
      <if test="uid != null" >
        uid = #{uid,jdbcType=INTEGER},
      </if>
      <if test="title != null" >
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="tid != null" >
        tid = #{tid,jdbcType=INTEGER},
      </if>
      <if test="time != null" >
        time = #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="num != null" >
        num = #{num,jdbcType=INTEGER},
      </if>
      <if test="flag != null" >
        flag = #{flag,jdbcType=INTEGER},
      </if>
      <if test="img != null" >
        img = #{img,jdbcType=VARCHAR},
      </if>
      <if test="content != null" >
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.plat.entity.Article" >
    update article
    set uid = #{uid,jdbcType=INTEGER},
      title = #{title,jdbcType=VARCHAR},
      tid = #{tid,jdbcType=INTEGER},
      time = #{time,jdbcType=TIMESTAMP},
      num = #{num,jdbcType=INTEGER},
      flag = #{flag,jdbcType=INTEGER},
      img = #{img,jdbcType=VARCHAR},
      content = #{content,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.plat.entity.Article" >
    update article
    set uid = #{uid,jdbcType=INTEGER},
      title = #{title,jdbcType=VARCHAR},
      tid = #{tid,jdbcType=INTEGER},
      time = #{time,jdbcType=TIMESTAMP},
      num = #{num,jdbcType=INTEGER},
      flag = #{flag,jdbcType=INTEGER},
      img = #{img,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="getTotalCount" resultType="int">
    select count(id) from article where flag=0
  </select>

  <select id="findPage" resultMap="ResultMapWithBLOBs" parameterType="object">
    select
    a.id, a.uid, a.title, a.tid, a.time, a.num, a.flag, a.img, atype.name tname,a.content
     from article a
     left join article_type atype on atype.id=a.tid
     where a.flag=0
     limit #{param1},#{param2}
  </select>

    <select id="findDetail" resultMap="ResultMapWithBLOBs" parameterType="int">
      select
        a.id, a.uid, a.title, a.tid, a.time, a.num, a.flag, a.img, atype.name tname,a.content
     from article a
     left join article_type atype on atype.id=a.tid
     where a.id=#{id}
    </select>

  <select id="getAllCount" resultType="int">
    select count(id) from article
  </select>

  <select id="findAllPage" resultMap="ResultMapWithBLOBs" parameterType="object">
    select
    a.id, a.uid, a.title, a.tid, a.time, a.num, a.flag, a.img, atype.name tname,a.content,u.username uname
     from article a
     left join article_type atype on atype.id=a.tid
     left join user u on u.uid=a.uid
     limit #{param1},#{param2}
  </select>
</mapper>